generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model audio_player {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @db.VarChar(255)
  manufacturer           String                   @db.VarChar(255)
  model                  String                   @db.VarChar(255)
  release_year           Int
  price                  Int
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  favorite_audio_players favorite_audio_players[]
}

model favorite_audio_players {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  audio_player_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  audio_player    audio_player @relation(fields: [audio_player_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model favorite_songs {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  song_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  song       song     @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model song {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String           @db.VarChar(255)
  artist         String           @db.VarChar(255)
  album          String           @db.VarChar(255)
  genre          String           @db.VarChar(255)
  release_year   Int
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  favorite_songs favorite_songs[]
}

model user {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String                   @unique @db.VarChar(255)
  firstName              String?                  @db.VarChar(255)
  lastName               String?                  @db.VarChar(255)
  roq_user_id            String                   @db.VarChar(255)
  tenant_id              String                   @db.VarChar(255)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  favorite_audio_players favorite_audio_players[]
  favorite_songs         favorite_songs[]
  organization           organization[]
}
